// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: protocol.proto

package openai_api_protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ModelCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Object  string  `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	Created int64   `protobuf:"varint,3,opt,name=created,proto3" json:"created,omitempty"`
	OwnedBy string  `protobuf:"bytes,4,opt,name=owned_by,json=ownedBy,proto3" json:"owned_by,omitempty"`
	Root    *string `protobuf:"bytes,5,opt,name=root,proto3,oneof" json:"root,omitempty"`
}

func (x *ModelCard) Reset() {
	*x = ModelCard{}
	mi := &file_protocol_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelCard) ProtoMessage() {}

func (x *ModelCard) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelCard.ProtoReflect.Descriptor instead.
func (*ModelCard) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *ModelCard) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ModelCard) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *ModelCard) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *ModelCard) GetOwnedBy() string {
	if x != nil {
		return x.OwnedBy
	}
	return ""
}

func (x *ModelCard) GetRoot() string {
	if x != nil && x.Root != nil {
		return *x.Root
	}
	return ""
}

type ModelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object string       `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	Data   []*ModelCard `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ModelList) Reset() {
	*x = ModelList{}
	mi := &file_protocol_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelList) ProtoMessage() {}

func (x *ModelList) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelList.ProtoReflect.Descriptor instead.
func (*ModelList) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *ModelList) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *ModelList) GetData() []*ModelCard {
	if x != nil {
		return x.Data
	}
	return nil
}

type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object  string  `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	Message string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Type    string  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Param   *string `protobuf:"bytes,4,opt,name=param,proto3,oneof" json:"param,omitempty"`
	Code    int32   `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	mi := &file_protocol_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *ErrorResponse) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *ErrorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ErrorResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ErrorResponse) GetParam() string {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return ""
}

func (x *ErrorResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type TokenLogprobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values map[string]float32 `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *TokenLogprobs) Reset() {
	*x = TokenLogprobs{}
	mi := &file_protocol_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenLogprobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenLogprobs) ProtoMessage() {}

func (x *TokenLogprobs) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenLogprobs.ProtoReflect.Descriptor instead.
func (*TokenLogprobs) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *TokenLogprobs) GetValues() map[string]float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type LogProbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TextOffset    []int32          `protobuf:"varint,1,rep,packed,name=text_offset,json=textOffset,proto3" json:"text_offset,omitempty"`
	TokenLogprobs []float32        `protobuf:"fixed32,2,rep,packed,name=token_logprobs,json=tokenLogprobs,proto3" json:"token_logprobs,omitempty"`
	Tokens        []string         `protobuf:"bytes,3,rep,name=tokens,proto3" json:"tokens,omitempty"`
	TopLogprobs   []*TokenLogprobs `protobuf:"bytes,4,rep,name=top_logprobs,json=topLogprobs,proto3" json:"top_logprobs,omitempty"` // Changed from map to repeated message
}

func (x *LogProbs) Reset() {
	*x = LogProbs{}
	mi := &file_protocol_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogProbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogProbs) ProtoMessage() {}

func (x *LogProbs) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogProbs.ProtoReflect.Descriptor instead.
func (*LogProbs) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{4}
}

func (x *LogProbs) GetTextOffset() []int32 {
	if x != nil {
		return x.TextOffset
	}
	return nil
}

func (x *LogProbs) GetTokenLogprobs() []float32 {
	if x != nil {
		return x.TokenLogprobs
	}
	return nil
}

func (x *LogProbs) GetTokens() []string {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *LogProbs) GetTopLogprobs() []*TokenLogprobs {
	if x != nil {
		return x.TopLogprobs
	}
	return nil
}

type TopLogprob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   string  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Bytes   []int32 `protobuf:"varint,2,rep,packed,name=bytes,proto3" json:"bytes,omitempty"`
	Logprob float32 `protobuf:"fixed32,3,opt,name=logprob,proto3" json:"logprob,omitempty"`
}

func (x *TopLogprob) Reset() {
	*x = TopLogprob{}
	mi := &file_protocol_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopLogprob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopLogprob) ProtoMessage() {}

func (x *TopLogprob) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopLogprob.ProtoReflect.Descriptor instead.
func (*TopLogprob) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{5}
}

func (x *TopLogprob) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TopLogprob) GetBytes() []int32 {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *TopLogprob) GetLogprob() float32 {
	if x != nil {
		return x.Logprob
	}
	return 0
}

type ChatCompletionTokenLogprob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token       string        `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Bytes       []int32       `protobuf:"varint,2,rep,packed,name=bytes,proto3" json:"bytes,omitempty"`
	Logprob     float32       `protobuf:"fixed32,3,opt,name=logprob,proto3" json:"logprob,omitempty"`
	TopLogprobs []*TopLogprob `protobuf:"bytes,4,rep,name=top_logprobs,json=topLogprobs,proto3" json:"top_logprobs,omitempty"`
}

func (x *ChatCompletionTokenLogprob) Reset() {
	*x = ChatCompletionTokenLogprob{}
	mi := &file_protocol_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatCompletionTokenLogprob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionTokenLogprob) ProtoMessage() {}

func (x *ChatCompletionTokenLogprob) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionTokenLogprob.ProtoReflect.Descriptor instead.
func (*ChatCompletionTokenLogprob) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{6}
}

func (x *ChatCompletionTokenLogprob) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ChatCompletionTokenLogprob) GetBytes() []int32 {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *ChatCompletionTokenLogprob) GetLogprob() float32 {
	if x != nil {
		return x.Logprob
	}
	return 0
}

func (x *ChatCompletionTokenLogprob) GetTopLogprobs() []*TopLogprob {
	if x != nil {
		return x.TopLogprobs
	}
	return nil
}

type ChoiceLogprobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []*ChatCompletionTokenLogprob `protobuf:"bytes,1,rep,name=content,proto3" json:"content,omitempty"`
}

func (x *ChoiceLogprobs) Reset() {
	*x = ChoiceLogprobs{}
	mi := &file_protocol_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChoiceLogprobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChoiceLogprobs) ProtoMessage() {}

func (x *ChoiceLogprobs) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChoiceLogprobs.ProtoReflect.Descriptor instead.
func (*ChoiceLogprobs) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{7}
}

func (x *ChoiceLogprobs) GetContent() []*ChatCompletionTokenLogprob {
	if x != nil {
		return x.Content
	}
	return nil
}

type UsageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PromptTokens        int32            `protobuf:"varint,1,opt,name=prompt_tokens,json=promptTokens,proto3" json:"prompt_tokens,omitempty"`
	TotalTokens         int32            `protobuf:"varint,2,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`
	CompletionTokens    *int32           `protobuf:"varint,3,opt,name=completion_tokens,json=completionTokens,proto3,oneof" json:"completion_tokens,omitempty"`
	PromptTokensDetails map[string]int32 `protobuf:"bytes,4,rep,name=prompt_tokens_details,json=promptTokensDetails,proto3" json:"prompt_tokens_details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *UsageInfo) Reset() {
	*x = UsageInfo{}
	mi := &file_protocol_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageInfo) ProtoMessage() {}

func (x *UsageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageInfo.ProtoReflect.Descriptor instead.
func (*UsageInfo) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{8}
}

func (x *UsageInfo) GetPromptTokens() int32 {
	if x != nil {
		return x.PromptTokens
	}
	return 0
}

func (x *UsageInfo) GetTotalTokens() int32 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

func (x *UsageInfo) GetCompletionTokens() int32 {
	if x != nil && x.CompletionTokens != nil {
		return *x.CompletionTokens
	}
	return 0
}

func (x *UsageInfo) GetPromptTokensDetails() map[string]int32 {
	if x != nil {
		return x.PromptTokensDetails
	}
	return nil
}

type StreamOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeUsage *bool `protobuf:"varint,1,opt,name=include_usage,json=includeUsage,proto3,oneof" json:"include_usage,omitempty"`
}

func (x *StreamOptions) Reset() {
	*x = StreamOptions{}
	mi := &file_protocol_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOptions) ProtoMessage() {}

func (x *StreamOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOptions.ProtoReflect.Descriptor instead.
func (*StreamOptions) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{9}
}

func (x *StreamOptions) GetIncludeUsage() bool {
	if x != nil && x.IncludeUsage != nil {
		return *x.IncludeUsage
	}
	return false
}

type JsonSchemaResponseFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description *string `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Schema      *string `protobuf:"bytes,3,opt,name=schema,proto3,oneof" json:"schema,omitempty"`
	Strict      *bool   `protobuf:"varint,4,opt,name=strict,proto3,oneof" json:"strict,omitempty"`
}

func (x *JsonSchemaResponseFormat) Reset() {
	*x = JsonSchemaResponseFormat{}
	mi := &file_protocol_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JsonSchemaResponseFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonSchemaResponseFormat) ProtoMessage() {}

func (x *JsonSchemaResponseFormat) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonSchemaResponseFormat.ProtoReflect.Descriptor instead.
func (*JsonSchemaResponseFormat) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{10}
}

func (x *JsonSchemaResponseFormat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JsonSchemaResponseFormat) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *JsonSchemaResponseFormat) GetSchema() string {
	if x != nil && x.Schema != nil {
		return *x.Schema
	}
	return ""
}

func (x *JsonSchemaResponseFormat) GetStrict() bool {
	if x != nil && x.Strict != nil {
		return *x.Strict
	}
	return false
}

type PromptContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text        *string          `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Texts       []string         `protobuf:"bytes,2,rep,name=texts,proto3" json:"texts,omitempty"`
	Tokens      []int32          `protobuf:"varint,3,rep,packed,name=tokens,proto3" json:"tokens,omitempty"`
	TokenMatrix []*TokenSequence `protobuf:"bytes,4,rep,name=token_matrix,json=tokenMatrix,proto3" json:"token_matrix,omitempty"`
}

func (x *PromptContent) Reset() {
	*x = PromptContent{}
	mi := &file_protocol_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PromptContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromptContent) ProtoMessage() {}

func (x *PromptContent) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromptContent.ProtoReflect.Descriptor instead.
func (*PromptContent) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{11}
}

func (x *PromptContent) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *PromptContent) GetTexts() []string {
	if x != nil {
		return x.Texts
	}
	return nil
}

func (x *PromptContent) GetTokens() []int32 {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *PromptContent) GetTokenMatrix() []*TokenSequence {
	if x != nil {
		return x.TokenMatrix
	}
	return nil
}

type TokenSequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens []int32 `protobuf:"varint,1,rep,packed,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *TokenSequence) Reset() {
	*x = TokenSequence{}
	mi := &file_protocol_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenSequence) ProtoMessage() {}

func (x *TokenSequence) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenSequence.ProtoReflect.Descriptor instead.
func (*TokenSequence) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{12}
}

func (x *TokenSequence) GetTokens() []int32 {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type MatchedStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntValue *int32  `protobuf:"varint,1,opt,name=int_value,json=intValue,proto3,oneof" json:"int_value,omitempty"`
	StrValue *string `protobuf:"bytes,2,opt,name=str_value,json=strValue,proto3,oneof" json:"str_value,omitempty"`
}

func (x *MatchedStop) Reset() {
	*x = MatchedStop{}
	mi := &file_protocol_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchedStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchedStop) ProtoMessage() {}

func (x *MatchedStop) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchedStop.ProtoReflect.Descriptor instead.
func (*MatchedStop) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{13}
}

func (x *MatchedStop) GetIntValue() int32 {
	if x != nil && x.IntValue != nil {
		return *x.IntValue
	}
	return 0
}

func (x *MatchedStop) GetStrValue() string {
	if x != nil && x.StrValue != nil {
		return *x.StrValue
	}
	return ""
}

type StopTrimConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Single   bool   `protobuf:"varint,1,opt,name=single,proto3" json:"single,omitempty"`
	Multiple []bool `protobuf:"varint,2,rep,packed,name=multiple,proto3" json:"multiple,omitempty"`
}

func (x *StopTrimConfig) Reset() {
	*x = StopTrimConfig{}
	mi := &file_protocol_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopTrimConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopTrimConfig) ProtoMessage() {}

func (x *StopTrimConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopTrimConfig.ProtoReflect.Descriptor instead.
func (*StopTrimConfig) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{14}
}

func (x *StopTrimConfig) GetSingle() bool {
	if x != nil {
		return x.Single
	}
	return false
}

func (x *StopTrimConfig) GetMultiple() []bool {
	if x != nil {
		return x.Multiple
	}
	return nil
}

type CompletionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model             string             `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	Prompt            *PromptContent     `protobuf:"bytes,2,opt,name=prompt,proto3" json:"prompt,omitempty"`
	BestOf            *int32             `protobuf:"varint,3,opt,name=best_of,json=bestOf,proto3,oneof" json:"best_of,omitempty"`
	Echo              bool               `protobuf:"varint,4,opt,name=echo,proto3" json:"echo,omitempty"`
	FrequencyPenalty  float32            `protobuf:"fixed32,5,opt,name=frequency_penalty,json=frequencyPenalty,proto3" json:"frequency_penalty,omitempty"`
	LogitBias         map[string]float32 `protobuf:"bytes,6,rep,name=logit_bias,json=logitBias,proto3" json:"logit_bias,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Logprobs          *int32             `protobuf:"varint,7,opt,name=logprobs,proto3,oneof" json:"logprobs,omitempty"`
	MaxTokens         int32              `protobuf:"varint,8,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`
	N                 int32              `protobuf:"varint,9,opt,name=n,proto3" json:"n,omitempty"`
	PresencePenalty   float32            `protobuf:"fixed32,10,opt,name=presence_penalty,json=presencePenalty,proto3" json:"presence_penalty,omitempty"`
	Seed              *int32             `protobuf:"varint,11,opt,name=seed,proto3,oneof" json:"seed,omitempty"`
	Stop              []string           `protobuf:"bytes,12,rep,name=stop,proto3" json:"stop,omitempty"`
	Stream            bool               `protobuf:"varint,13,opt,name=stream,proto3" json:"stream,omitempty"`
	StreamOptions     *StreamOptions     `protobuf:"bytes,14,opt,name=stream_options,json=streamOptions,proto3,oneof" json:"stream_options,omitempty"`
	Suffix            *string            `protobuf:"bytes,15,opt,name=suffix,proto3,oneof" json:"suffix,omitempty"`
	Temperature       float32            `protobuf:"fixed32,16,opt,name=temperature,proto3" json:"temperature,omitempty"`
	TopP              float32            `protobuf:"fixed32,17,opt,name=top_p,json=topP,proto3" json:"top_p,omitempty"`
	User              *string            `protobuf:"bytes,18,opt,name=user,proto3,oneof" json:"user,omitempty"`
	Regex             *string            `protobuf:"bytes,19,opt,name=regex,proto3,oneof" json:"regex,omitempty"`
	JsonSchema        *string            `protobuf:"bytes,20,opt,name=json_schema,json=jsonSchema,proto3,oneof" json:"json_schema,omitempty"`
	IgnoreEos         bool               `protobuf:"varint,21,opt,name=ignore_eos,json=ignoreEos,proto3" json:"ignore_eos,omitempty"`
	MinTokens         int32              `protobuf:"varint,22,opt,name=min_tokens,json=minTokens,proto3" json:"min_tokens,omitempty"`
	RepetitionPenalty float32            `protobuf:"fixed32,23,opt,name=repetition_penalty,json=repetitionPenalty,proto3" json:"repetition_penalty,omitempty"`
	StopTokenIds      []int32            `protobuf:"varint,24,rep,packed,name=stop_token_ids,json=stopTokenIds,proto3" json:"stop_token_ids,omitempty"`
	NoStopTrim        *StopTrimConfig    `protobuf:"bytes,25,opt,name=no_stop_trim,json=noStopTrim,proto3" json:"no_stop_trim,omitempty"`
}

func (x *CompletionRequest) Reset() {
	*x = CompletionRequest{}
	mi := &file_protocol_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionRequest) ProtoMessage() {}

func (x *CompletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionRequest.ProtoReflect.Descriptor instead.
func (*CompletionRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{15}
}

func (x *CompletionRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CompletionRequest) GetPrompt() *PromptContent {
	if x != nil {
		return x.Prompt
	}
	return nil
}

func (x *CompletionRequest) GetBestOf() int32 {
	if x != nil && x.BestOf != nil {
		return *x.BestOf
	}
	return 0
}

func (x *CompletionRequest) GetEcho() bool {
	if x != nil {
		return x.Echo
	}
	return false
}

func (x *CompletionRequest) GetFrequencyPenalty() float32 {
	if x != nil {
		return x.FrequencyPenalty
	}
	return 0
}

func (x *CompletionRequest) GetLogitBias() map[string]float32 {
	if x != nil {
		return x.LogitBias
	}
	return nil
}

func (x *CompletionRequest) GetLogprobs() int32 {
	if x != nil && x.Logprobs != nil {
		return *x.Logprobs
	}
	return 0
}

func (x *CompletionRequest) GetMaxTokens() int32 {
	if x != nil {
		return x.MaxTokens
	}
	return 0
}

func (x *CompletionRequest) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *CompletionRequest) GetPresencePenalty() float32 {
	if x != nil {
		return x.PresencePenalty
	}
	return 0
}

func (x *CompletionRequest) GetSeed() int32 {
	if x != nil && x.Seed != nil {
		return *x.Seed
	}
	return 0
}

func (x *CompletionRequest) GetStop() []string {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *CompletionRequest) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

func (x *CompletionRequest) GetStreamOptions() *StreamOptions {
	if x != nil {
		return x.StreamOptions
	}
	return nil
}

func (x *CompletionRequest) GetSuffix() string {
	if x != nil && x.Suffix != nil {
		return *x.Suffix
	}
	return ""
}

func (x *CompletionRequest) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *CompletionRequest) GetTopP() float32 {
	if x != nil {
		return x.TopP
	}
	return 0
}

func (x *CompletionRequest) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *CompletionRequest) GetRegex() string {
	if x != nil && x.Regex != nil {
		return *x.Regex
	}
	return ""
}

func (x *CompletionRequest) GetJsonSchema() string {
	if x != nil && x.JsonSchema != nil {
		return *x.JsonSchema
	}
	return ""
}

func (x *CompletionRequest) GetIgnoreEos() bool {
	if x != nil {
		return x.IgnoreEos
	}
	return false
}

func (x *CompletionRequest) GetMinTokens() int32 {
	if x != nil {
		return x.MinTokens
	}
	return 0
}

func (x *CompletionRequest) GetRepetitionPenalty() float32 {
	if x != nil {
		return x.RepetitionPenalty
	}
	return 0
}

func (x *CompletionRequest) GetStopTokenIds() []int32 {
	if x != nil {
		return x.StopTokenIds
	}
	return nil
}

func (x *CompletionRequest) GetNoStopTrim() *StopTrimConfig {
	if x != nil {
		return x.NoStopTrim
	}
	return nil
}

type CompletionResponseChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        int32        `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Text         string       `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Logprobs     *LogProbs    `protobuf:"bytes,3,opt,name=logprobs,proto3,oneof" json:"logprobs,omitempty"`
	FinishReason *string      `protobuf:"bytes,4,opt,name=finish_reason,json=finishReason,proto3,oneof" json:"finish_reason,omitempty"`
	MatchedStop  *MatchedStop `protobuf:"bytes,5,opt,name=matched_stop,json=matchedStop,proto3,oneof" json:"matched_stop,omitempty"`
}

func (x *CompletionResponseChoice) Reset() {
	*x = CompletionResponseChoice{}
	mi := &file_protocol_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompletionResponseChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionResponseChoice) ProtoMessage() {}

func (x *CompletionResponseChoice) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionResponseChoice.ProtoReflect.Descriptor instead.
func (*CompletionResponseChoice) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{16}
}

func (x *CompletionResponseChoice) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CompletionResponseChoice) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CompletionResponseChoice) GetLogprobs() *LogProbs {
	if x != nil {
		return x.Logprobs
	}
	return nil
}

func (x *CompletionResponseChoice) GetFinishReason() string {
	if x != nil && x.FinishReason != nil {
		return *x.FinishReason
	}
	return ""
}

func (x *CompletionResponseChoice) GetMatchedStop() *MatchedStop {
	if x != nil {
		return x.MatchedStop
	}
	return nil
}

type CompletionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Object  string                      `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	Created int64                       `protobuf:"varint,3,opt,name=created,proto3" json:"created,omitempty"`
	Model   string                      `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	Choices []*CompletionResponseChoice `protobuf:"bytes,5,rep,name=choices,proto3" json:"choices,omitempty"`
	Usage   *UsageInfo                  `protobuf:"bytes,6,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *CompletionResponse) Reset() {
	*x = CompletionResponse{}
	mi := &file_protocol_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionResponse) ProtoMessage() {}

func (x *CompletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionResponse.ProtoReflect.Descriptor instead.
func (*CompletionResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{17}
}

func (x *CompletionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CompletionResponse) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *CompletionResponse) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *CompletionResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CompletionResponse) GetChoices() []*CompletionResponseChoice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *CompletionResponse) GetUsage() *UsageInfo {
	if x != nil {
		return x.Usage
	}
	return nil
}

type ChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role    *string `protobuf:"bytes,1,opt,name=role,proto3,oneof" json:"role,omitempty"`
	Content *string `protobuf:"bytes,2,opt,name=content,proto3,oneof" json:"content,omitempty"`
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	mi := &file_protocol_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{18}
}

func (x *ChatMessage) GetRole() string {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return ""
}

func (x *ChatMessage) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

type ChatCompletionResponseChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        int32          `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Message      *ChatMessage   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Logprobs     *LogProbsUnion `protobuf:"bytes,3,opt,name=logprobs,proto3,oneof" json:"logprobs,omitempty"`
	FinishReason string         `protobuf:"bytes,4,opt,name=finish_reason,json=finishReason,proto3" json:"finish_reason,omitempty"`
	MatchedStop  *MatchedStop   `protobuf:"bytes,5,opt,name=matched_stop,json=matchedStop,proto3,oneof" json:"matched_stop,omitempty"`
}

func (x *ChatCompletionResponseChoice) Reset() {
	*x = ChatCompletionResponseChoice{}
	mi := &file_protocol_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatCompletionResponseChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionResponseChoice) ProtoMessage() {}

func (x *ChatCompletionResponseChoice) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionResponseChoice.ProtoReflect.Descriptor instead.
func (*ChatCompletionResponseChoice) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{19}
}

func (x *ChatCompletionResponseChoice) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ChatCompletionResponseChoice) GetMessage() *ChatMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ChatCompletionResponseChoice) GetLogprobs() *LogProbsUnion {
	if x != nil {
		return x.Logprobs
	}
	return nil
}

func (x *ChatCompletionResponseChoice) GetFinishReason() string {
	if x != nil {
		return x.FinishReason
	}
	return ""
}

func (x *ChatCompletionResponseChoice) GetMatchedStop() *MatchedStop {
	if x != nil {
		return x.MatchedStop
	}
	return nil
}

type ChatCompletionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Object  string                          `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	Created int64                           `protobuf:"varint,3,opt,name=created,proto3" json:"created,omitempty"`
	Model   string                          `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	Choices []*ChatCompletionResponseChoice `protobuf:"bytes,5,rep,name=choices,proto3" json:"choices,omitempty"`
	Usage   *UsageInfo                      `protobuf:"bytes,6,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *ChatCompletionResponse) Reset() {
	*x = ChatCompletionResponse{}
	mi := &file_protocol_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatCompletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionResponse) ProtoMessage() {}

func (x *ChatCompletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionResponse.ProtoReflect.Descriptor instead.
func (*ChatCompletionResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{20}
}

func (x *ChatCompletionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChatCompletionResponse) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *ChatCompletionResponse) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *ChatCompletionResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ChatCompletionResponse) GetChoices() []*ChatCompletionResponseChoice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *ChatCompletionResponse) GetUsage() *UsageInfo {
	if x != nil {
		return x.Usage
	}
	return nil
}

type FileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File    []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Purpose string `protobuf:"bytes,2,opt,name=purpose,proto3" json:"purpose,omitempty"`
}

func (x *FileRequest) Reset() {
	*x = FileRequest{}
	mi := &file_protocol_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRequest) ProtoMessage() {}

func (x *FileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRequest.ProtoReflect.Descriptor instead.
func (*FileRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{21}
}

func (x *FileRequest) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *FileRequest) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

type FileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Object    string `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	Bytes     int32  `protobuf:"varint,3,opt,name=bytes,proto3" json:"bytes,omitempty"`
	CreatedAt int64  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Filename  string `protobuf:"bytes,5,opt,name=filename,proto3" json:"filename,omitempty"`
	Purpose   string `protobuf:"bytes,6,opt,name=purpose,proto3" json:"purpose,omitempty"`
}

func (x *FileResponse) Reset() {
	*x = FileResponse{}
	mi := &file_protocol_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileResponse) ProtoMessage() {}

func (x *FileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileResponse.ProtoReflect.Descriptor instead.
func (*FileResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{22}
}

func (x *FileResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileResponse) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *FileResponse) GetBytes() int32 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *FileResponse) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FileResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileResponse) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

type FileDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Object  string `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	Deleted bool   `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *FileDeleteResponse) Reset() {
	*x = FileDeleteResponse{}
	mi := &file_protocol_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDeleteResponse) ProtoMessage() {}

func (x *FileDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDeleteResponse.ProtoReflect.Descriptor instead.
func (*FileDeleteResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{23}
}

func (x *FileDeleteResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileDeleteResponse) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *FileDeleteResponse) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type BatchMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BatchMetadata) Reset() {
	*x = BatchMetadata{}
	mi := &file_protocol_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchMetadata) ProtoMessage() {}

func (x *BatchMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchMetadata.ProtoReflect.Descriptor instead.
func (*BatchMetadata) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{24}
}

func (x *BatchMetadata) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *BatchMetadata) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type BatchError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BatchError) Reset() {
	*x = BatchError{}
	mi := &file_protocol_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchError) ProtoMessage() {}

func (x *BatchError) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchError.ProtoReflect.Descriptor instead.
func (*BatchError) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{25}
}

func (x *BatchError) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *BatchError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputFileId      string           `protobuf:"bytes,1,opt,name=input_file_id,json=inputFileId,proto3" json:"input_file_id,omitempty"`
	Endpoint         string           `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	CompletionWindow string           `protobuf:"bytes,3,opt,name=completion_window,json=completionWindow,proto3" json:"completion_window,omitempty"`
	Metadata         []*BatchMetadata `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *BatchRequest) Reset() {
	*x = BatchRequest{}
	mi := &file_protocol_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRequest) ProtoMessage() {}

func (x *BatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRequest.ProtoReflect.Descriptor instead.
func (*BatchRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{26}
}

func (x *BatchRequest) GetInputFileId() string {
	if x != nil {
		return x.InputFileId
	}
	return ""
}

func (x *BatchRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *BatchRequest) GetCompletionWindow() string {
	if x != nil {
		return x.CompletionWindow
	}
	return ""
}

func (x *BatchRequest) GetMetadata() []*BatchMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type RequestCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Completed int32 `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"`
	Failed    int32 `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`
}

func (x *RequestCounts) Reset() {
	*x = RequestCounts{}
	mi := &file_protocol_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCounts) ProtoMessage() {}

func (x *RequestCounts) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCounts.ProtoReflect.Descriptor instead.
func (*RequestCounts) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{27}
}

func (x *RequestCounts) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RequestCounts) GetCompleted() int32 {
	if x != nil {
		return x.Completed
	}
	return 0
}

func (x *RequestCounts) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

type BatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Object           string           `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	Endpoint         string           `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Errors           *BatchError      `protobuf:"bytes,4,opt,name=errors,proto3,oneof" json:"errors,omitempty"`
	InputFileId      string           `protobuf:"bytes,5,opt,name=input_file_id,json=inputFileId,proto3" json:"input_file_id,omitempty"`
	CompletionWindow string           `protobuf:"bytes,6,opt,name=completion_window,json=completionWindow,proto3" json:"completion_window,omitempty"`
	Status           string           `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	OutputFileId     *string          `protobuf:"bytes,8,opt,name=output_file_id,json=outputFileId,proto3,oneof" json:"output_file_id,omitempty"`
	ErrorFileId      *string          `protobuf:"bytes,9,opt,name=error_file_id,json=errorFileId,proto3,oneof" json:"error_file_id,omitempty"`
	CreatedAt        int64            `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	InProgressAt     *int64           `protobuf:"varint,11,opt,name=in_progress_at,json=inProgressAt,proto3,oneof" json:"in_progress_at,omitempty"`
	ExpiresAt        *int64           `protobuf:"varint,12,opt,name=expires_at,json=expiresAt,proto3,oneof" json:"expires_at,omitempty"`
	FinalizingAt     *int64           `protobuf:"varint,13,opt,name=finalizing_at,json=finalizingAt,proto3,oneof" json:"finalizing_at,omitempty"`
	CompletedAt      *int64           `protobuf:"varint,14,opt,name=completed_at,json=completedAt,proto3,oneof" json:"completed_at,omitempty"`
	FailedAt         *int64           `protobuf:"varint,15,opt,name=failed_at,json=failedAt,proto3,oneof" json:"failed_at,omitempty"`
	ExpiredAt        *int64           `protobuf:"varint,16,opt,name=expired_at,json=expiredAt,proto3,oneof" json:"expired_at,omitempty"`
	CancellingAt     *int64           `protobuf:"varint,17,opt,name=cancelling_at,json=cancellingAt,proto3,oneof" json:"cancelling_at,omitempty"`
	CancelledAt      *int64           `protobuf:"varint,18,opt,name=cancelled_at,json=cancelledAt,proto3,oneof" json:"cancelled_at,omitempty"`
	RequestCounts    *RequestCounts   `protobuf:"bytes,19,opt,name=request_counts,json=requestCounts,proto3" json:"request_counts,omitempty"`
	Metadata         []*BatchMetadata `protobuf:"bytes,20,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *BatchResponse) Reset() {
	*x = BatchResponse{}
	mi := &file_protocol_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchResponse) ProtoMessage() {}

func (x *BatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchResponse.ProtoReflect.Descriptor instead.
func (*BatchResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{28}
}

func (x *BatchResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BatchResponse) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *BatchResponse) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *BatchResponse) GetErrors() *BatchError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *BatchResponse) GetInputFileId() string {
	if x != nil {
		return x.InputFileId
	}
	return ""
}

func (x *BatchResponse) GetCompletionWindow() string {
	if x != nil {
		return x.CompletionWindow
	}
	return ""
}

func (x *BatchResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BatchResponse) GetOutputFileId() string {
	if x != nil && x.OutputFileId != nil {
		return *x.OutputFileId
	}
	return ""
}

func (x *BatchResponse) GetErrorFileId() string {
	if x != nil && x.ErrorFileId != nil {
		return *x.ErrorFileId
	}
	return ""
}

func (x *BatchResponse) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BatchResponse) GetInProgressAt() int64 {
	if x != nil && x.InProgressAt != nil {
		return *x.InProgressAt
	}
	return 0
}

func (x *BatchResponse) GetExpiresAt() int64 {
	if x != nil && x.ExpiresAt != nil {
		return *x.ExpiresAt
	}
	return 0
}

func (x *BatchResponse) GetFinalizingAt() int64 {
	if x != nil && x.FinalizingAt != nil {
		return *x.FinalizingAt
	}
	return 0
}

func (x *BatchResponse) GetCompletedAt() int64 {
	if x != nil && x.CompletedAt != nil {
		return *x.CompletedAt
	}
	return 0
}

func (x *BatchResponse) GetFailedAt() int64 {
	if x != nil && x.FailedAt != nil {
		return *x.FailedAt
	}
	return 0
}

func (x *BatchResponse) GetExpiredAt() int64 {
	if x != nil && x.ExpiredAt != nil {
		return *x.ExpiredAt
	}
	return 0
}

func (x *BatchResponse) GetCancellingAt() int64 {
	if x != nil && x.CancellingAt != nil {
		return *x.CancellingAt
	}
	return 0
}

func (x *BatchResponse) GetCancelledAt() int64 {
	if x != nil && x.CancelledAt != nil {
		return *x.CancelledAt
	}
	return 0
}

func (x *BatchResponse) GetRequestCounts() *RequestCounts {
	if x != nil {
		return x.RequestCounts
	}
	return nil
}

func (x *BatchResponse) GetMetadata() []*BatchMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CompletionResponseStreamChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        int32        `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Text         string       `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Logprobs     *LogProbs    `protobuf:"bytes,3,opt,name=logprobs,proto3,oneof" json:"logprobs,omitempty"`
	FinishReason *string      `protobuf:"bytes,4,opt,name=finish_reason,json=finishReason,proto3,oneof" json:"finish_reason,omitempty"`
	MatchedStop  *MatchedStop `protobuf:"bytes,5,opt,name=matched_stop,json=matchedStop,proto3,oneof" json:"matched_stop,omitempty"`
}

func (x *CompletionResponseStreamChoice) Reset() {
	*x = CompletionResponseStreamChoice{}
	mi := &file_protocol_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompletionResponseStreamChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionResponseStreamChoice) ProtoMessage() {}

func (x *CompletionResponseStreamChoice) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionResponseStreamChoice.ProtoReflect.Descriptor instead.
func (*CompletionResponseStreamChoice) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{29}
}

func (x *CompletionResponseStreamChoice) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CompletionResponseStreamChoice) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CompletionResponseStreamChoice) GetLogprobs() *LogProbs {
	if x != nil {
		return x.Logprobs
	}
	return nil
}

func (x *CompletionResponseStreamChoice) GetFinishReason() string {
	if x != nil && x.FinishReason != nil {
		return *x.FinishReason
	}
	return ""
}

func (x *CompletionResponseStreamChoice) GetMatchedStop() *MatchedStop {
	if x != nil {
		return x.MatchedStop
	}
	return nil
}

type CompletionStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Object  string                            `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	Created int64                             `protobuf:"varint,3,opt,name=created,proto3" json:"created,omitempty"`
	Model   string                            `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	Choices []*CompletionResponseStreamChoice `protobuf:"bytes,5,rep,name=choices,proto3" json:"choices,omitempty"`
	Usage   *UsageInfo                        `protobuf:"bytes,6,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
}

func (x *CompletionStreamResponse) Reset() {
	*x = CompletionStreamResponse{}
	mi := &file_protocol_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompletionStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionStreamResponse) ProtoMessage() {}

func (x *CompletionStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionStreamResponse.ProtoReflect.Descriptor instead.
func (*CompletionStreamResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{30}
}

func (x *CompletionStreamResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CompletionStreamResponse) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *CompletionStreamResponse) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *CompletionStreamResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CompletionStreamResponse) GetChoices() []*CompletionResponseStreamChoice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *CompletionStreamResponse) GetUsage() *UsageInfo {
	if x != nil {
		return x.Usage
	}
	return nil
}

type ChatCompletionMessageContentTextPart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *ChatCompletionMessageContentTextPart) Reset() {
	*x = ChatCompletionMessageContentTextPart{}
	mi := &file_protocol_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatCompletionMessageContentTextPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionMessageContentTextPart) ProtoMessage() {}

func (x *ChatCompletionMessageContentTextPart) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionMessageContentTextPart.ProtoReflect.Descriptor instead.
func (*ChatCompletionMessageContentTextPart) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{31}
}

func (x *ChatCompletionMessageContentTextPart) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChatCompletionMessageContentTextPart) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ChatCompletionMessageContentImageURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Detail string `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *ChatCompletionMessageContentImageURL) Reset() {
	*x = ChatCompletionMessageContentImageURL{}
	mi := &file_protocol_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatCompletionMessageContentImageURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionMessageContentImageURL) ProtoMessage() {}

func (x *ChatCompletionMessageContentImageURL) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionMessageContentImageURL.ProtoReflect.Descriptor instead.
func (*ChatCompletionMessageContentImageURL) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{32}
}

func (x *ChatCompletionMessageContentImageURL) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ChatCompletionMessageContentImageURL) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type ChatCompletionMessageContentImagePart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string                                `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ImageUrl   *ChatCompletionMessageContentImageURL `protobuf:"bytes,2,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Modalities string                                `protobuf:"bytes,3,opt,name=modalities,proto3" json:"modalities,omitempty"`
}

func (x *ChatCompletionMessageContentImagePart) Reset() {
	*x = ChatCompletionMessageContentImagePart{}
	mi := &file_protocol_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatCompletionMessageContentImagePart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionMessageContentImagePart) ProtoMessage() {}

func (x *ChatCompletionMessageContentImagePart) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionMessageContentImagePart.ProtoReflect.Descriptor instead.
func (*ChatCompletionMessageContentImagePart) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{33}
}

func (x *ChatCompletionMessageContentImagePart) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChatCompletionMessageContentImagePart) GetImageUrl() *ChatCompletionMessageContentImageURL {
	if x != nil {
		return x.ImageUrl
	}
	return nil
}

func (x *ChatCompletionMessageContentImagePart) GetModalities() string {
	if x != nil {
		return x.Modalities
	}
	return ""
}

type GenericMessageContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text  *string                                 `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Parts []*ChatCompletionMessageContentTextPart `protobuf:"bytes,2,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (x *GenericMessageContent) Reset() {
	*x = GenericMessageContent{}
	mi := &file_protocol_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericMessageContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericMessageContent) ProtoMessage() {}

func (x *GenericMessageContent) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericMessageContent.ProtoReflect.Descriptor instead.
func (*GenericMessageContent) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{34}
}

func (x *GenericMessageContent) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *GenericMessageContent) GetParts() []*ChatCompletionMessageContentTextPart {
	if x != nil {
		return x.Parts
	}
	return nil
}

type ChatCompletionMessageGenericParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role    string                 `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Content *GenericMessageContent `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ChatCompletionMessageGenericParam) Reset() {
	*x = ChatCompletionMessageGenericParam{}
	mi := &file_protocol_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatCompletionMessageGenericParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionMessageGenericParam) ProtoMessage() {}

func (x *ChatCompletionMessageGenericParam) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionMessageGenericParam.ProtoReflect.Descriptor instead.
func (*ChatCompletionMessageGenericParam) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{35}
}

func (x *ChatCompletionMessageGenericParam) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *ChatCompletionMessageGenericParam) GetContent() *GenericMessageContent {
	if x != nil {
		return x.Content
	}
	return nil
}

type MessageContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text   *string                                  `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Parts  []*ChatCompletionMessageContentTextPart  `protobuf:"bytes,2,rep,name=parts,proto3" json:"parts,omitempty"`
	Images []*ChatCompletionMessageContentImagePart `protobuf:"bytes,3,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *MessageContent) Reset() {
	*x = MessageContent{}
	mi := &file_protocol_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageContent) ProtoMessage() {}

func (x *MessageContent) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageContent.ProtoReflect.Descriptor instead.
func (*MessageContent) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{36}
}

func (x *MessageContent) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *MessageContent) GetParts() []*ChatCompletionMessageContentTextPart {
	if x != nil {
		return x.Parts
	}
	return nil
}

func (x *MessageContent) GetImages() []*ChatCompletionMessageContentImagePart {
	if x != nil {
		return x.Images
	}
	return nil
}

type ChatCompletionMessageUserParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role    string          `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Content *MessageContent `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ChatCompletionMessageUserParam) Reset() {
	*x = ChatCompletionMessageUserParam{}
	mi := &file_protocol_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatCompletionMessageUserParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionMessageUserParam) ProtoMessage() {}

func (x *ChatCompletionMessageUserParam) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionMessageUserParam.ProtoReflect.Descriptor instead.
func (*ChatCompletionMessageUserParam) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{37}
}

func (x *ChatCompletionMessageUserParam) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *ChatCompletionMessageUserParam) GetContent() *MessageContent {
	if x != nil {
		return x.Content
	}
	return nil
}

type ResponseFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string                    `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	JsonSchema *JsonSchemaResponseFormat `protobuf:"bytes,2,opt,name=json_schema,json=jsonSchema,proto3,oneof" json:"json_schema,omitempty"`
}

func (x *ResponseFormat) Reset() {
	*x = ResponseFormat{}
	mi := &file_protocol_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFormat) ProtoMessage() {}

func (x *ResponseFormat) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFormat.ProtoReflect.Descriptor instead.
func (*ResponseFormat) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{38}
}

func (x *ResponseFormat) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResponseFormat) GetJsonSchema() *JsonSchemaResponseFormat {
	if x != nil {
		return x.JsonSchema
	}
	return nil
}

type MessageParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenericParam *ChatCompletionMessageGenericParam `protobuf:"bytes,1,opt,name=generic_param,json=genericParam,proto3,oneof" json:"generic_param,omitempty"`
	UserParam    *ChatCompletionMessageUserParam    `protobuf:"bytes,2,opt,name=user_param,json=userParam,proto3,oneof" json:"user_param,omitempty"`
}

func (x *MessageParam) Reset() {
	*x = MessageParam{}
	mi := &file_protocol_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageParam) ProtoMessage() {}

func (x *MessageParam) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageParam.ProtoReflect.Descriptor instead.
func (*MessageParam) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{39}
}

func (x *MessageParam) GetGenericParam() *ChatCompletionMessageGenericParam {
	if x != nil {
		return x.GenericParam
	}
	return nil
}

func (x *MessageParam) GetUserParam() *ChatCompletionMessageUserParam {
	if x != nil {
		return x.UserParam
	}
	return nil
}

type ChatCompletionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages          []*MessageParam    `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Model             string             `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	FrequencyPenalty  float32            `protobuf:"fixed32,3,opt,name=frequency_penalty,json=frequencyPenalty,proto3" json:"frequency_penalty,omitempty"`
	LogitBias         map[string]float32 `protobuf:"bytes,4,rep,name=logit_bias,json=logitBias,proto3" json:"logit_bias,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Logprobs          bool               `protobuf:"varint,5,opt,name=logprobs,proto3" json:"logprobs,omitempty"`
	TopLogprobs       *int32             `protobuf:"varint,6,opt,name=top_logprobs,json=topLogprobs,proto3,oneof" json:"top_logprobs,omitempty"`
	MaxTokens         *int32             `protobuf:"varint,7,opt,name=max_tokens,json=maxTokens,proto3,oneof" json:"max_tokens,omitempty"`
	N                 int32              `protobuf:"varint,8,opt,name=n,proto3" json:"n,omitempty"`
	PresencePenalty   float32            `protobuf:"fixed32,9,opt,name=presence_penalty,json=presencePenalty,proto3" json:"presence_penalty,omitempty"`
	ResponseFormat    *ResponseFormat    `protobuf:"bytes,10,opt,name=response_format,json=responseFormat,proto3,oneof" json:"response_format,omitempty"`
	Seed              *int32             `protobuf:"varint,11,opt,name=seed,proto3,oneof" json:"seed,omitempty"`
	Stop              []string           `protobuf:"bytes,12,rep,name=stop,proto3" json:"stop,omitempty"`
	Stream            bool               `protobuf:"varint,13,opt,name=stream,proto3" json:"stream,omitempty"`
	StreamOptions     *StreamOptions     `protobuf:"bytes,14,opt,name=stream_options,json=streamOptions,proto3,oneof" json:"stream_options,omitempty"`
	Temperature       float32            `protobuf:"fixed32,15,opt,name=temperature,proto3" json:"temperature,omitempty"`
	TopP              float32            `protobuf:"fixed32,16,opt,name=top_p,json=topP,proto3" json:"top_p,omitempty"`
	User              *string            `protobuf:"bytes,17,opt,name=user,proto3,oneof" json:"user,omitempty"`
	Regex             *string            `protobuf:"bytes,18,opt,name=regex,proto3,oneof" json:"regex,omitempty"`
	MinTokens         int32              `protobuf:"varint,19,opt,name=min_tokens,json=minTokens,proto3" json:"min_tokens,omitempty"`
	RepetitionPenalty float32            `protobuf:"fixed32,20,opt,name=repetition_penalty,json=repetitionPenalty,proto3" json:"repetition_penalty,omitempty"`
	StopTokenIds      []int32            `protobuf:"varint,21,rep,packed,name=stop_token_ids,json=stopTokenIds,proto3" json:"stop_token_ids,omitempty"`
	IgnoreEos         bool               `protobuf:"varint,22,opt,name=ignore_eos,json=ignoreEos,proto3" json:"ignore_eos,omitempty"`
}

func (x *ChatCompletionRequest) Reset() {
	*x = ChatCompletionRequest{}
	mi := &file_protocol_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatCompletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionRequest) ProtoMessage() {}

func (x *ChatCompletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionRequest.ProtoReflect.Descriptor instead.
func (*ChatCompletionRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{40}
}

func (x *ChatCompletionRequest) GetMessages() []*MessageParam {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ChatCompletionRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ChatCompletionRequest) GetFrequencyPenalty() float32 {
	if x != nil {
		return x.FrequencyPenalty
	}
	return 0
}

func (x *ChatCompletionRequest) GetLogitBias() map[string]float32 {
	if x != nil {
		return x.LogitBias
	}
	return nil
}

func (x *ChatCompletionRequest) GetLogprobs() bool {
	if x != nil {
		return x.Logprobs
	}
	return false
}

func (x *ChatCompletionRequest) GetTopLogprobs() int32 {
	if x != nil && x.TopLogprobs != nil {
		return *x.TopLogprobs
	}
	return 0
}

func (x *ChatCompletionRequest) GetMaxTokens() int32 {
	if x != nil && x.MaxTokens != nil {
		return *x.MaxTokens
	}
	return 0
}

func (x *ChatCompletionRequest) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *ChatCompletionRequest) GetPresencePenalty() float32 {
	if x != nil {
		return x.PresencePenalty
	}
	return 0
}

func (x *ChatCompletionRequest) GetResponseFormat() *ResponseFormat {
	if x != nil {
		return x.ResponseFormat
	}
	return nil
}

func (x *ChatCompletionRequest) GetSeed() int32 {
	if x != nil && x.Seed != nil {
		return *x.Seed
	}
	return 0
}

func (x *ChatCompletionRequest) GetStop() []string {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *ChatCompletionRequest) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

func (x *ChatCompletionRequest) GetStreamOptions() *StreamOptions {
	if x != nil {
		return x.StreamOptions
	}
	return nil
}

func (x *ChatCompletionRequest) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *ChatCompletionRequest) GetTopP() float32 {
	if x != nil {
		return x.TopP
	}
	return 0
}

func (x *ChatCompletionRequest) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *ChatCompletionRequest) GetRegex() string {
	if x != nil && x.Regex != nil {
		return *x.Regex
	}
	return ""
}

func (x *ChatCompletionRequest) GetMinTokens() int32 {
	if x != nil {
		return x.MinTokens
	}
	return 0
}

func (x *ChatCompletionRequest) GetRepetitionPenalty() float32 {
	if x != nil {
		return x.RepetitionPenalty
	}
	return 0
}

func (x *ChatCompletionRequest) GetStopTokenIds() []int32 {
	if x != nil {
		return x.StopTokenIds
	}
	return nil
}

func (x *ChatCompletionRequest) GetIgnoreEos() bool {
	if x != nil {
		return x.IgnoreEos
	}
	return false
}

type DeltaMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role    *string `protobuf:"bytes,1,opt,name=role,proto3,oneof" json:"role,omitempty"`
	Content *string `protobuf:"bytes,2,opt,name=content,proto3,oneof" json:"content,omitempty"`
}

func (x *DeltaMessage) Reset() {
	*x = DeltaMessage{}
	mi := &file_protocol_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeltaMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeltaMessage) ProtoMessage() {}

func (x *DeltaMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeltaMessage.ProtoReflect.Descriptor instead.
func (*DeltaMessage) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{41}
}

func (x *DeltaMessage) GetRole() string {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return ""
}

func (x *DeltaMessage) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

type LogProbsUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Basic  *LogProbs       `protobuf:"bytes,1,opt,name=basic,proto3,oneof" json:"basic,omitempty"`
	Choice *ChoiceLogprobs `protobuf:"bytes,2,opt,name=choice,proto3,oneof" json:"choice,omitempty"`
}

func (x *LogProbsUnion) Reset() {
	*x = LogProbsUnion{}
	mi := &file_protocol_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogProbsUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogProbsUnion) ProtoMessage() {}

func (x *LogProbsUnion) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogProbsUnion.ProtoReflect.Descriptor instead.
func (*LogProbsUnion) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{42}
}

func (x *LogProbsUnion) GetBasic() *LogProbs {
	if x != nil {
		return x.Basic
	}
	return nil
}

func (x *LogProbsUnion) GetChoice() *ChoiceLogprobs {
	if x != nil {
		return x.Choice
	}
	return nil
}

type ChatCompletionResponseStreamChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        int32          `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Delta        *DeltaMessage  `protobuf:"bytes,2,opt,name=delta,proto3" json:"delta,omitempty"`
	Logprobs     *LogProbsUnion `protobuf:"bytes,3,opt,name=logprobs,proto3,oneof" json:"logprobs,omitempty"`
	FinishReason *string        `protobuf:"bytes,4,opt,name=finish_reason,json=finishReason,proto3,oneof" json:"finish_reason,omitempty"`
	MatchedStop  *MatchedStop   `protobuf:"bytes,5,opt,name=matched_stop,json=matchedStop,proto3,oneof" json:"matched_stop,omitempty"`
}

func (x *ChatCompletionResponseStreamChoice) Reset() {
	*x = ChatCompletionResponseStreamChoice{}
	mi := &file_protocol_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatCompletionResponseStreamChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionResponseStreamChoice) ProtoMessage() {}

func (x *ChatCompletionResponseStreamChoice) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionResponseStreamChoice.ProtoReflect.Descriptor instead.
func (*ChatCompletionResponseStreamChoice) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{43}
}

func (x *ChatCompletionResponseStreamChoice) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ChatCompletionResponseStreamChoice) GetDelta() *DeltaMessage {
	if x != nil {
		return x.Delta
	}
	return nil
}

func (x *ChatCompletionResponseStreamChoice) GetLogprobs() *LogProbsUnion {
	if x != nil {
		return x.Logprobs
	}
	return nil
}

func (x *ChatCompletionResponseStreamChoice) GetFinishReason() string {
	if x != nil && x.FinishReason != nil {
		return *x.FinishReason
	}
	return ""
}

func (x *ChatCompletionResponseStreamChoice) GetMatchedStop() *MatchedStop {
	if x != nil {
		return x.MatchedStop
	}
	return nil
}

type ChatCompletionStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string                                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Object  string                                `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	Created int64                                 `protobuf:"varint,3,opt,name=created,proto3" json:"created,omitempty"`
	Model   string                                `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	Choices []*ChatCompletionResponseStreamChoice `protobuf:"bytes,5,rep,name=choices,proto3" json:"choices,omitempty"`
	Usage   *UsageInfo                            `protobuf:"bytes,6,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
}

func (x *ChatCompletionStreamResponse) Reset() {
	*x = ChatCompletionStreamResponse{}
	mi := &file_protocol_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatCompletionStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionStreamResponse) ProtoMessage() {}

func (x *ChatCompletionStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionStreamResponse.ProtoReflect.Descriptor instead.
func (*ChatCompletionStreamResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{44}
}

func (x *ChatCompletionStreamResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChatCompletionStreamResponse) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *ChatCompletionStreamResponse) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *ChatCompletionStreamResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ChatCompletionStreamResponse) GetChoices() []*ChatCompletionResponseStreamChoice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *ChatCompletionStreamResponse) GetUsage() *UsageInfo {
	if x != nil {
		return x.Usage
	}
	return nil
}

type EmbeddingInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text        *string          `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Texts       []string         `protobuf:"bytes,2,rep,name=texts,proto3" json:"texts,omitempty"`
	Tokens      []int32          `protobuf:"varint,3,rep,packed,name=tokens,proto3" json:"tokens,omitempty"`
	TokenMatrix []*TokenSequence `protobuf:"bytes,4,rep,name=token_matrix,json=tokenMatrix,proto3" json:"token_matrix,omitempty"`
}

func (x *EmbeddingInput) Reset() {
	*x = EmbeddingInput{}
	mi := &file_protocol_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmbeddingInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddingInput) ProtoMessage() {}

func (x *EmbeddingInput) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbeddingInput.ProtoReflect.Descriptor instead.
func (*EmbeddingInput) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{45}
}

func (x *EmbeddingInput) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *EmbeddingInput) GetTexts() []string {
	if x != nil {
		return x.Texts
	}
	return nil
}

func (x *EmbeddingInput) GetTokens() []int32 {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *EmbeddingInput) GetTokenMatrix() []*TokenSequence {
	if x != nil {
		return x.TokenMatrix
	}
	return nil
}

type EmbeddingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input          *EmbeddingInput `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Model          string          `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	EncodingFormat string          `protobuf:"bytes,3,opt,name=encoding_format,json=encodingFormat,proto3" json:"encoding_format,omitempty"`
	Dimensions     *int32          `protobuf:"varint,4,opt,name=dimensions,proto3,oneof" json:"dimensions,omitempty"`
	User           *string         `protobuf:"bytes,5,opt,name=user,proto3,oneof" json:"user,omitempty"`
}

func (x *EmbeddingRequest) Reset() {
	*x = EmbeddingRequest{}
	mi := &file_protocol_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmbeddingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddingRequest) ProtoMessage() {}

func (x *EmbeddingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbeddingRequest.ProtoReflect.Descriptor instead.
func (*EmbeddingRequest) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{46}
}

func (x *EmbeddingRequest) GetInput() *EmbeddingInput {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *EmbeddingRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *EmbeddingRequest) GetEncodingFormat() string {
	if x != nil {
		return x.EncodingFormat
	}
	return ""
}

func (x *EmbeddingRequest) GetDimensions() int32 {
	if x != nil && x.Dimensions != nil {
		return *x.Dimensions
	}
	return 0
}

func (x *EmbeddingRequest) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

type EmbeddingObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Embedding []float32 `protobuf:"fixed32,1,rep,packed,name=embedding,proto3" json:"embedding,omitempty"`
	Index     int32     `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Object    string    `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *EmbeddingObject) Reset() {
	*x = EmbeddingObject{}
	mi := &file_protocol_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmbeddingObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddingObject) ProtoMessage() {}

func (x *EmbeddingObject) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbeddingObject.ProtoReflect.Descriptor instead.
func (*EmbeddingObject) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{47}
}

func (x *EmbeddingObject) GetEmbedding() []float32 {
	if x != nil {
		return x.Embedding
	}
	return nil
}

func (x *EmbeddingObject) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *EmbeddingObject) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

type EmbeddingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   []*EmbeddingObject `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Model  string             `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	Object string             `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	Usage  *UsageInfo         `protobuf:"bytes,4,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
}

func (x *EmbeddingResponse) Reset() {
	*x = EmbeddingResponse{}
	mi := &file_protocol_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmbeddingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddingResponse) ProtoMessage() {}

func (x *EmbeddingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbeddingResponse.ProtoReflect.Descriptor instead.
func (*EmbeddingResponse) Descriptor() ([]byte, []int) {
	return file_protocol_proto_rawDescGZIP(), []int{48}
}

func (x *EmbeddingResponse) GetData() []*EmbeddingObject {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EmbeddingResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *EmbeddingResponse) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *EmbeddingResponse) GetUsage() *UsageInfo {
	if x != nil {
		return x.Usage
	}
	return nil
}

var File_protocol_proto protoreflect.FileDescriptor

var file_protocol_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x22, 0x8a, 0x01, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x12, 0x17,
	0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x72, 0x6f, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x22, 0x55, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x01, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x67, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaf, 0x01, 0x0a, 0x08,
	0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x65, 0x78, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x5f,
	0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73,
	0x52, 0x0b, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x22, 0x52, 0x0a,
	0x0a, 0x54, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x70, 0x72,
	0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f,
	0x62, 0x22, 0xa4, 0x01, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6c,
	0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f,
	0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x54, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x52, 0x0b, 0x74, 0x6f, 0x70,
	0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x22, 0x59, 0x0a, 0x0e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x67,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0xce, 0x02, 0x0a, 0x09, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x69, 0x0a, 0x15, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x67, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x46, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x22, 0x4b, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xb5, 0x01, 0x0a, 0x18, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x27, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x6d, 0x0a, 0x0b, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x74,
	0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x08, 0x73, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73,
	0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70,
	0x54, 0x72, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x22, 0xc9,
	0x08, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x67, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x62, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x88,
	0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x12, 0x52, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x74, 0x5f, 0x62, 0x69, 0x61,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72,
	0x6f, 0x62, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x67,
	0x70, 0x72, 0x6f, 0x62, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x12, 0x17, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f,
	0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x03, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x50, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x6f, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x45, 0x6f, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12,
	0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x72, 0x65, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x6e, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x74, 0x72, 0x69, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x67, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x54, 0x72, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x6e,
	0x6f, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x69, 0x6d, 0x1a, 0x3c, 0x0a, 0x0e, 0x4c, 0x6f, 0x67,
	0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x65, 0x73, 0x74,
	0x5f, 0x6f, 0x66, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xa4, 0x02, 0x0a, 0x18, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x73,
	0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x48,
	0x02, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x22, 0xe7, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x45, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5a, 0x0a, 0x0b, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xbc, 0x02, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x38,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x70,
	0x72, 0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x67, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x48, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x53, 0x74, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x67,
	0x70, 0x72, 0x6f, 0x62, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x22, 0xef, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x49, 0x0a, 0x07, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x67, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3b, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x12, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x22, 0x37, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x0a, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x5b, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22,
	0xe0, 0x07, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x29, 0x0a,
	0x0e, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0c, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e,
	0x67, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x07, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x0c, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x22, 0xaa, 0x02, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x3c, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x48, 0x00,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x48, 0x02, 0x52,
	0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x22,
	0x82, 0x02, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x4b, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x4e, 0x0a, 0x24, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x50, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x50, 0x0a, 0x24, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xb1, 0x01, 0x0a, 0x25, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c,
	0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73,
	0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x22, 0x7b, 0x0a, 0x21, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x42,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4d,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x72, 0x74, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x12, 0x50, 0x0a,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22, 0x71, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x3b,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x73, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xe6, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x5e, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x67, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x48, 0x01, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x93,
	0x08, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x67, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69,
	0x74, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73,
	0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x12, 0x26, 0x0a, 0x0c,
	0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x12, 0x4f, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x67, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x02, 0x52,
	0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x03, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x74, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x48, 0x04, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x70,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x50, 0x12, 0x17, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12,
	0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x72, 0x65, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x65,
	0x6f, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x45, 0x6f, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f,
	0x62, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x22, 0x5b, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x9c, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x55, 0x6e,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x48,
	0x00, 0x52, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x67,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x48, 0x01,
	0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0xd6, 0x02, 0x0a, 0x22, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x35, 0x0a,
	0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x72,
	0x6f, 0x62, 0x73, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x70,
	0x72, 0x6f, 0x62, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x46, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f,
	0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x22, 0x8a, 0x02, 0x0a, 0x1c, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x4f, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x0e, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x12, 0x43, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x22, 0xe0,
	0x01, 0x0a, 0x10, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x0a, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x22, 0x5d, 0x0a, 0x0f, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0xbc, 0x01, 0x0a, 0x11, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x37, 0x0a, 0x05,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x67,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x1c, 0x5a, 0x1a, 0x73, 0x67, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_proto_rawDescOnce sync.Once
	file_protocol_proto_rawDescData = file_protocol_proto_rawDesc
)

func file_protocol_proto_rawDescGZIP() []byte {
	file_protocol_proto_rawDescOnce.Do(func() {
		file_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_proto_rawDescData)
	})
	return file_protocol_proto_rawDescData
}

var file_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_protocol_proto_goTypes = []any{
	(*ModelCard)(nil),                             // 0: sglang.openai_api.ModelCard
	(*ModelList)(nil),                             // 1: sglang.openai_api.ModelList
	(*ErrorResponse)(nil),                         // 2: sglang.openai_api.ErrorResponse
	(*TokenLogprobs)(nil),                         // 3: sglang.openai_api.TokenLogprobs
	(*LogProbs)(nil),                              // 4: sglang.openai_api.LogProbs
	(*TopLogprob)(nil),                            // 5: sglang.openai_api.TopLogprob
	(*ChatCompletionTokenLogprob)(nil),            // 6: sglang.openai_api.ChatCompletionTokenLogprob
	(*ChoiceLogprobs)(nil),                        // 7: sglang.openai_api.ChoiceLogprobs
	(*UsageInfo)(nil),                             // 8: sglang.openai_api.UsageInfo
	(*StreamOptions)(nil),                         // 9: sglang.openai_api.StreamOptions
	(*JsonSchemaResponseFormat)(nil),              // 10: sglang.openai_api.JsonSchemaResponseFormat
	(*PromptContent)(nil),                         // 11: sglang.openai_api.PromptContent
	(*TokenSequence)(nil),                         // 12: sglang.openai_api.TokenSequence
	(*MatchedStop)(nil),                           // 13: sglang.openai_api.MatchedStop
	(*StopTrimConfig)(nil),                        // 14: sglang.openai_api.StopTrimConfig
	(*CompletionRequest)(nil),                     // 15: sglang.openai_api.CompletionRequest
	(*CompletionResponseChoice)(nil),              // 16: sglang.openai_api.CompletionResponseChoice
	(*CompletionResponse)(nil),                    // 17: sglang.openai_api.CompletionResponse
	(*ChatMessage)(nil),                           // 18: sglang.openai_api.ChatMessage
	(*ChatCompletionResponseChoice)(nil),          // 19: sglang.openai_api.ChatCompletionResponseChoice
	(*ChatCompletionResponse)(nil),                // 20: sglang.openai_api.ChatCompletionResponse
	(*FileRequest)(nil),                           // 21: sglang.openai_api.FileRequest
	(*FileResponse)(nil),                          // 22: sglang.openai_api.FileResponse
	(*FileDeleteResponse)(nil),                    // 23: sglang.openai_api.FileDeleteResponse
	(*BatchMetadata)(nil),                         // 24: sglang.openai_api.BatchMetadata
	(*BatchError)(nil),                            // 25: sglang.openai_api.BatchError
	(*BatchRequest)(nil),                          // 26: sglang.openai_api.BatchRequest
	(*RequestCounts)(nil),                         // 27: sglang.openai_api.RequestCounts
	(*BatchResponse)(nil),                         // 28: sglang.openai_api.BatchResponse
	(*CompletionResponseStreamChoice)(nil),        // 29: sglang.openai_api.CompletionResponseStreamChoice
	(*CompletionStreamResponse)(nil),              // 30: sglang.openai_api.CompletionStreamResponse
	(*ChatCompletionMessageContentTextPart)(nil),  // 31: sglang.openai_api.ChatCompletionMessageContentTextPart
	(*ChatCompletionMessageContentImageURL)(nil),  // 32: sglang.openai_api.ChatCompletionMessageContentImageURL
	(*ChatCompletionMessageContentImagePart)(nil), // 33: sglang.openai_api.ChatCompletionMessageContentImagePart
	(*GenericMessageContent)(nil),                 // 34: sglang.openai_api.GenericMessageContent
	(*ChatCompletionMessageGenericParam)(nil),     // 35: sglang.openai_api.ChatCompletionMessageGenericParam
	(*MessageContent)(nil),                        // 36: sglang.openai_api.MessageContent
	(*ChatCompletionMessageUserParam)(nil),        // 37: sglang.openai_api.ChatCompletionMessageUserParam
	(*ResponseFormat)(nil),                        // 38: sglang.openai_api.ResponseFormat
	(*MessageParam)(nil),                          // 39: sglang.openai_api.MessageParam
	(*ChatCompletionRequest)(nil),                 // 40: sglang.openai_api.ChatCompletionRequest
	(*DeltaMessage)(nil),                          // 41: sglang.openai_api.DeltaMessage
	(*LogProbsUnion)(nil),                         // 42: sglang.openai_api.LogProbsUnion
	(*ChatCompletionResponseStreamChoice)(nil),    // 43: sglang.openai_api.ChatCompletionResponseStreamChoice
	(*ChatCompletionStreamResponse)(nil),          // 44: sglang.openai_api.ChatCompletionStreamResponse
	(*EmbeddingInput)(nil),                        // 45: sglang.openai_api.EmbeddingInput
	(*EmbeddingRequest)(nil),                      // 46: sglang.openai_api.EmbeddingRequest
	(*EmbeddingObject)(nil),                       // 47: sglang.openai_api.EmbeddingObject
	(*EmbeddingResponse)(nil),                     // 48: sglang.openai_api.EmbeddingResponse
	nil,                                           // 49: sglang.openai_api.TokenLogprobs.ValuesEntry
	nil,                                           // 50: sglang.openai_api.UsageInfo.PromptTokensDetailsEntry
	nil,                                           // 51: sglang.openai_api.CompletionRequest.LogitBiasEntry
	nil,                                           // 52: sglang.openai_api.ChatCompletionRequest.LogitBiasEntry
}
var file_protocol_proto_depIdxs = []int32{
	0,  // 0: sglang.openai_api.ModelList.data:type_name -> sglang.openai_api.ModelCard
	49, // 1: sglang.openai_api.TokenLogprobs.values:type_name -> sglang.openai_api.TokenLogprobs.ValuesEntry
	3,  // 2: sglang.openai_api.LogProbs.top_logprobs:type_name -> sglang.openai_api.TokenLogprobs
	5,  // 3: sglang.openai_api.ChatCompletionTokenLogprob.top_logprobs:type_name -> sglang.openai_api.TopLogprob
	6,  // 4: sglang.openai_api.ChoiceLogprobs.content:type_name -> sglang.openai_api.ChatCompletionTokenLogprob
	50, // 5: sglang.openai_api.UsageInfo.prompt_tokens_details:type_name -> sglang.openai_api.UsageInfo.PromptTokensDetailsEntry
	12, // 6: sglang.openai_api.PromptContent.token_matrix:type_name -> sglang.openai_api.TokenSequence
	11, // 7: sglang.openai_api.CompletionRequest.prompt:type_name -> sglang.openai_api.PromptContent
	51, // 8: sglang.openai_api.CompletionRequest.logit_bias:type_name -> sglang.openai_api.CompletionRequest.LogitBiasEntry
	9,  // 9: sglang.openai_api.CompletionRequest.stream_options:type_name -> sglang.openai_api.StreamOptions
	14, // 10: sglang.openai_api.CompletionRequest.no_stop_trim:type_name -> sglang.openai_api.StopTrimConfig
	4,  // 11: sglang.openai_api.CompletionResponseChoice.logprobs:type_name -> sglang.openai_api.LogProbs
	13, // 12: sglang.openai_api.CompletionResponseChoice.matched_stop:type_name -> sglang.openai_api.MatchedStop
	16, // 13: sglang.openai_api.CompletionResponse.choices:type_name -> sglang.openai_api.CompletionResponseChoice
	8,  // 14: sglang.openai_api.CompletionResponse.usage:type_name -> sglang.openai_api.UsageInfo
	18, // 15: sglang.openai_api.ChatCompletionResponseChoice.message:type_name -> sglang.openai_api.ChatMessage
	42, // 16: sglang.openai_api.ChatCompletionResponseChoice.logprobs:type_name -> sglang.openai_api.LogProbsUnion
	13, // 17: sglang.openai_api.ChatCompletionResponseChoice.matched_stop:type_name -> sglang.openai_api.MatchedStop
	19, // 18: sglang.openai_api.ChatCompletionResponse.choices:type_name -> sglang.openai_api.ChatCompletionResponseChoice
	8,  // 19: sglang.openai_api.ChatCompletionResponse.usage:type_name -> sglang.openai_api.UsageInfo
	24, // 20: sglang.openai_api.BatchRequest.metadata:type_name -> sglang.openai_api.BatchMetadata
	25, // 21: sglang.openai_api.BatchResponse.errors:type_name -> sglang.openai_api.BatchError
	27, // 22: sglang.openai_api.BatchResponse.request_counts:type_name -> sglang.openai_api.RequestCounts
	24, // 23: sglang.openai_api.BatchResponse.metadata:type_name -> sglang.openai_api.BatchMetadata
	4,  // 24: sglang.openai_api.CompletionResponseStreamChoice.logprobs:type_name -> sglang.openai_api.LogProbs
	13, // 25: sglang.openai_api.CompletionResponseStreamChoice.matched_stop:type_name -> sglang.openai_api.MatchedStop
	29, // 26: sglang.openai_api.CompletionStreamResponse.choices:type_name -> sglang.openai_api.CompletionResponseStreamChoice
	8,  // 27: sglang.openai_api.CompletionStreamResponse.usage:type_name -> sglang.openai_api.UsageInfo
	32, // 28: sglang.openai_api.ChatCompletionMessageContentImagePart.image_url:type_name -> sglang.openai_api.ChatCompletionMessageContentImageURL
	31, // 29: sglang.openai_api.GenericMessageContent.parts:type_name -> sglang.openai_api.ChatCompletionMessageContentTextPart
	34, // 30: sglang.openai_api.ChatCompletionMessageGenericParam.content:type_name -> sglang.openai_api.GenericMessageContent
	31, // 31: sglang.openai_api.MessageContent.parts:type_name -> sglang.openai_api.ChatCompletionMessageContentTextPart
	33, // 32: sglang.openai_api.MessageContent.images:type_name -> sglang.openai_api.ChatCompletionMessageContentImagePart
	36, // 33: sglang.openai_api.ChatCompletionMessageUserParam.content:type_name -> sglang.openai_api.MessageContent
	10, // 34: sglang.openai_api.ResponseFormat.json_schema:type_name -> sglang.openai_api.JsonSchemaResponseFormat
	35, // 35: sglang.openai_api.MessageParam.generic_param:type_name -> sglang.openai_api.ChatCompletionMessageGenericParam
	37, // 36: sglang.openai_api.MessageParam.user_param:type_name -> sglang.openai_api.ChatCompletionMessageUserParam
	39, // 37: sglang.openai_api.ChatCompletionRequest.messages:type_name -> sglang.openai_api.MessageParam
	52, // 38: sglang.openai_api.ChatCompletionRequest.logit_bias:type_name -> sglang.openai_api.ChatCompletionRequest.LogitBiasEntry
	38, // 39: sglang.openai_api.ChatCompletionRequest.response_format:type_name -> sglang.openai_api.ResponseFormat
	9,  // 40: sglang.openai_api.ChatCompletionRequest.stream_options:type_name -> sglang.openai_api.StreamOptions
	4,  // 41: sglang.openai_api.LogProbsUnion.basic:type_name -> sglang.openai_api.LogProbs
	7,  // 42: sglang.openai_api.LogProbsUnion.choice:type_name -> sglang.openai_api.ChoiceLogprobs
	41, // 43: sglang.openai_api.ChatCompletionResponseStreamChoice.delta:type_name -> sglang.openai_api.DeltaMessage
	42, // 44: sglang.openai_api.ChatCompletionResponseStreamChoice.logprobs:type_name -> sglang.openai_api.LogProbsUnion
	13, // 45: sglang.openai_api.ChatCompletionResponseStreamChoice.matched_stop:type_name -> sglang.openai_api.MatchedStop
	43, // 46: sglang.openai_api.ChatCompletionStreamResponse.choices:type_name -> sglang.openai_api.ChatCompletionResponseStreamChoice
	8,  // 47: sglang.openai_api.ChatCompletionStreamResponse.usage:type_name -> sglang.openai_api.UsageInfo
	12, // 48: sglang.openai_api.EmbeddingInput.token_matrix:type_name -> sglang.openai_api.TokenSequence
	45, // 49: sglang.openai_api.EmbeddingRequest.input:type_name -> sglang.openai_api.EmbeddingInput
	47, // 50: sglang.openai_api.EmbeddingResponse.data:type_name -> sglang.openai_api.EmbeddingObject
	8,  // 51: sglang.openai_api.EmbeddingResponse.usage:type_name -> sglang.openai_api.UsageInfo
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_protocol_proto_init() }
func file_protocol_proto_init() {
	if File_protocol_proto != nil {
		return
	}
	file_protocol_proto_msgTypes[0].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[2].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[8].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[9].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[10].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[11].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[13].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[15].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[16].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[18].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[19].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[28].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[29].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[30].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[34].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[36].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[38].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[39].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[40].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[41].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[42].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[43].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[44].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[45].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[46].OneofWrappers = []any{}
	file_protocol_proto_msgTypes[48].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protocol_proto_goTypes,
		DependencyIndexes: file_protocol_proto_depIdxs,
		MessageInfos:      file_protocol_proto_msgTypes,
	}.Build()
	File_protocol_proto = out.File
	file_protocol_proto_rawDesc = nil
	file_protocol_proto_goTypes = nil
	file_protocol_proto_depIdxs = nil
}
