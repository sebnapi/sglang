syntax = "proto3";

package sglang.openai_api;

message ModelCard {
  string id = 1;
  string object = 2;
  int64 created = 3;
  string owned_by = 4;
  optional string root = 5;
}

message ModelList {
  string object = 1;
  repeated ModelCard data = 2;
}

message ErrorResponse {
  string object = 1;
  string message = 2;
  string type = 3;
  optional string param = 4;
  int32 code = 5;
}

message TokenLogprobs {
  map<string, float> values = 1;
}

message LogProbs {
  repeated int32 text_offset = 1;
  repeated float token_logprobs = 2;
  repeated string tokens = 3;
  repeated TokenLogprobs top_logprobs = 4;  // Changed from map to repeated message
}

message TopLogprob {
  string token = 1;
  repeated int32 bytes = 2;
  float logprob = 3;
}

message ChatCompletionTokenLogprob {
  string token = 1;
  repeated int32 bytes = 2;
  float logprob = 3;
  repeated TopLogprob top_logprobs = 4;
}

message ChoiceLogprobs {
  repeated ChatCompletionTokenLogprob content = 1;
}

message UsageInfo {
  int32 prompt_tokens = 1;
  int32 total_tokens = 2;
  optional int32 completion_tokens = 3;
  map<string, int32> prompt_tokens_details = 4;
}

message StreamOptions {
  optional bool include_usage = 1;
}

message JsonSchemaResponseFormat {
  string name = 1;
  optional string description = 2;
  optional string schema = 3;
  optional bool strict = 4;
}

message PromptContent {
  optional string text = 1;
  repeated string texts = 2;
  repeated int32 tokens = 3;
  repeated TokenSequence token_matrix = 4;
}

message TokenSequence {
  repeated int32 tokens = 1;
}

message MatchedStop {
  optional int32 int_value = 1;
  optional string str_value = 2;
}

message StopTrimConfig {
  bool single = 1;
  repeated bool multiple = 2;
}

message CompletionRequest {
  string model = 1;
  PromptContent prompt = 2;
  optional int32 best_of = 3;
  bool echo = 4;
  float frequency_penalty = 5;
  map<string, float> logit_bias = 6;
  optional int32 logprobs = 7;
  int32 max_tokens = 8;
  int32 n = 9;
  float presence_penalty = 10;
  optional int32 seed = 11;
  repeated string stop = 12;
  bool stream = 13;
  optional StreamOptions stream_options = 14;
  optional string suffix = 15;
  float temperature = 16;
  float top_p = 17;
  optional string user = 18;
  optional string regex = 19;
  optional string json_schema = 20;
  bool ignore_eos = 21;
  int32 min_tokens = 22;
  float repetition_penalty = 23;
  repeated int32 stop_token_ids = 24;
  StopTrimConfig no_stop_trim = 25;
}

message CompletionResponseChoice {
  int32 index = 1;
  string text = 2;
  optional LogProbs logprobs = 3;
  optional string finish_reason = 4;
  optional MatchedStop matched_stop = 5;
}

message CompletionResponse {
  string id = 1;
  string object = 2;
  int64 created = 3;
  string model = 4;
  repeated CompletionResponseChoice choices = 5;
  UsageInfo usage = 6;
}

message ChatMessage {
  optional string role = 1;
  optional string content = 2;
}

message ChatCompletionResponseChoice {
  int32 index = 1;
  ChatMessage message = 2;
  optional LogProbsUnion logprobs = 3;
  string finish_reason = 4;
  optional MatchedStop matched_stop = 5;
}

message ChatCompletionResponse {
  string id = 1;
  string object = 2;
  int64 created = 3;
  string model = 4;
  repeated ChatCompletionResponseChoice choices = 5;
  UsageInfo usage = 6;
}

message FileRequest {
  bytes file = 1;
  string purpose = 2;
}

message FileResponse {
  string id = 1;
  string object = 2;
  int32 bytes = 3;
  int64 created_at = 4;
  string filename = 5;
  string purpose = 6;
}

message FileDeleteResponse {
  string id = 1;
  string object = 2;
  bool deleted = 3;
}

message BatchMetadata {
  string key = 1;
  string value = 2;
}

message BatchError {
  string code = 1;
  string message = 2;
}

message BatchRequest {
  string input_file_id = 1;
  string endpoint = 2;
  string completion_window = 3;
  repeated BatchMetadata metadata = 4;
}

message RequestCounts {
  int32 total = 1;
  int32 completed = 2;
  int32 failed = 3;
}

message BatchResponse {
  string id = 1;
  string object = 2;
  string endpoint = 3;
  optional BatchError errors = 4;
  string input_file_id = 5;
  string completion_window = 6;
  string status = 7;
  optional string output_file_id = 8;
  optional string error_file_id = 9;
  int64 created_at = 10;
  optional int64 in_progress_at = 11;
  optional int64 expires_at = 12;
  optional int64 finalizing_at = 13;
  optional int64 completed_at = 14;
  optional int64 failed_at = 15;
  optional int64 expired_at = 16;
  optional int64 cancelling_at = 17;
  optional int64 cancelled_at = 18;
  RequestCounts request_counts = 19;
  repeated BatchMetadata metadata = 20;
}

message CompletionResponseStreamChoice {
  int32 index = 1;
  string text = 2;
  optional LogProbs logprobs = 3;
  optional string finish_reason = 4;
  optional MatchedStop matched_stop = 5;
}

message CompletionStreamResponse {
  string id = 1;
  string object = 2;
  int64 created = 3;
  string model = 4;
  repeated CompletionResponseStreamChoice choices = 5;
  optional UsageInfo usage = 6;
}

message ChatCompletionMessageContentTextPart {
  string type = 1;
  string text = 2;
}

message ChatCompletionMessageContentImageURL {
  string url = 1;
  string detail = 2;
}

message ChatCompletionMessageContentImagePart {
  string type = 1;
  ChatCompletionMessageContentImageURL image_url = 2;
  string modalities = 3;
}

message GenericMessageContent {
  optional string text = 1;
  repeated ChatCompletionMessageContentTextPart parts = 2;
}

message ChatCompletionMessageGenericParam {
  string role = 1;
  GenericMessageContent content = 2;
}

message MessageContent {
  optional string text = 1;
  repeated ChatCompletionMessageContentTextPart parts = 2;
  repeated ChatCompletionMessageContentImagePart images = 3;
}

message ChatCompletionMessageUserParam {
  string role = 1;
  MessageContent content = 2;
}

message ResponseFormat {
  string type = 1;
  optional JsonSchemaResponseFormat json_schema = 2;
}

message MessageParam {
  optional ChatCompletionMessageGenericParam generic_param = 1;
  optional ChatCompletionMessageUserParam user_param = 2;
}

message ChatCompletionRequest {
  repeated MessageParam messages = 1;
  string model = 2;
  float frequency_penalty = 3;
  map<string, float> logit_bias = 4;
  bool logprobs = 5;
  optional int32 top_logprobs = 6;
  optional int32 max_tokens = 7;
  int32 n = 8;
  float presence_penalty = 9;
  optional ResponseFormat response_format = 10;
  optional int32 seed = 11;
  repeated string stop = 12;
  bool stream = 13;
  optional StreamOptions stream_options = 14;
  float temperature = 15;
  float top_p = 16;
  optional string user = 17;
  optional string regex = 18;
  int32 min_tokens = 19;
  float repetition_penalty = 20;
  repeated int32 stop_token_ids = 21;
  bool ignore_eos = 22;
}

message DeltaMessage {
  optional string role = 1;
  optional string content = 2;
}

message LogProbsUnion {
  optional LogProbs basic = 1;
  optional ChoiceLogprobs choice = 2;
}

message ChatCompletionResponseStreamChoice {
  int32 index = 1;
  DeltaMessage delta = 2;
  optional LogProbsUnion logprobs = 3;
  optional string finish_reason = 4;
  optional MatchedStop matched_stop = 5;
}

message ChatCompletionStreamResponse {
  string id = 1;
  string object = 2;
  int64 created = 3;
  string model = 4;
  repeated ChatCompletionResponseStreamChoice choices = 5;
  optional UsageInfo usage = 6;
}

message EmbeddingInput {
  optional string text = 1;
  repeated string texts = 2;
  repeated int32 tokens = 3;
  repeated TokenSequence token_matrix = 4;
}

message EmbeddingRequest {
  EmbeddingInput input = 1;
  string model = 2;
  string encoding_format = 3;
  optional int32 dimensions = 4;
  optional string user = 5;
}

message EmbeddingObject {
  repeated float embedding = 1;
  int32 index = 2;
  string object = 3;
}

message EmbeddingResponse {
  repeated EmbeddingObject data = 1;
  string model = 2;
  string object = 3;
  optional UsageInfo usage = 4;
}